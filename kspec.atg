#include <iostream>
#include <sstream>
#include <stdexcept>
#include <boost/lexical_cast.hpp>
#include "keyboard.h"
#include "hid_usages.h"
#include "utils.h"

using boost::lexical_cast;

COMPILER kspec

  kspec::Keyboard::Ptr kb;

  const kspec::Usage &lookup_usage(const std::wstring &id, const std::wstring &page)
  {
    const kspec::Usage &usage = kspec::Usage::lookup(id, page);
    if (usage.id < 2)
    {
      std::wstringstream str;
      if (usage.id == 0)
        str << "Unknown usage '" << id << "'";
      else
        str << "Unknown usage page '" << page << "'";
      SemErr(str.str().c_str());
    }
    return usage;
  }

  void import(const std::wstring &quoted_filename)
  {
    std::wstring filename = quoted_filename.substr(1, quoted_filename.length() - 2);

    Scanner *scanner = new Scanner(filename.c_str());
    Parser  *parser  = new Parser(scanner);
    parser->set_kb(kb);
    parser->Parse();
    if (parser->errors->count)
    {
      std::stringstream msg;
      msg << "Parse failed with " << parser->errors->count << " errors.";
      throw std::runtime_error(msg.str().c_str());
    }
  }

  void set_kb(kspec::Keyboard::Ptr the_kb)
  {
    kb = the_kb;
  }

CHARACTERS
  letter  = 'A' .. 'Z' + 'a' .. 'z'.
  digit   = '0' .. '9'.
  cr      = '\r'.
  lf      = '\n'.
  tab     = '\t'.
  id_ch   = letter + digit + "`~-_!@#$%^&*()+={}[]/?;.,".
  esc_ch  = ":<>'\"\\|#".
  stringCh  = ANY - '"' - '\\' - cr - lf.
  charCh    = ANY - '\'' - '\\' - cr - lf.
  printable =  '\u0020' .. '\u007e'.

TOKENS
  ident     = (id_ch | "_" esc_ch) {id_ch | "_" esc_ch}.
  string    = '"' { stringCh | '\\' printable } '"'.
  badString = '"' { stringCh | '\\' printable } (cr | lf).

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS
/* ----------------------------------------------------------------------------- */
  kspec =
    ( Keyboard | Matrix | Layout | KeyMap ).


/* ----------------------------------------------------------------------------- */
  Import =
    "import" string                 (. import(t->val); .)
    .
/* ----------------------------------------------------------------------------- */
  Layout =
    "Layout:" ident                 (. kspec::Layout::Ptr layout(new kspec::Layout(t->val)); .)
    RowDef<*layout>
    {
      RowDef<*layout>
    }                               (. kb->add_layout(layout); .)
    .

  RowDef<kspec::Layout &layout> =
    "RowDef:"                       (. kspec::KeyDef::Ptr keydef; layout.new_row(); .)
    KeyDef<keydef>                  (. layout.add_keydef(keydef); .)
    {
      ( KeyDef<keydef>              (. layout.add_keydef(keydef); .)
      | Gap<keydef>                 (. layout.add_keydef(keydef); .)
      )
    }.

  KeyDef<kspec::KeyDef::Ptr &keydef> =
    "KeyDef:" ident                 (. keydef.reset(new kspec::KeyDef(t->val)); .)
    ( { Width<*keydef> }
    | { Height<*keydef> }
    | { "bump" }                    (. keydef->set_bump(); .)
    ).

  Gap<kspec::KeyDef::Ptr &keydef> =
    "Gap:"                          (. keydef.reset(new kspec::KeyDef(L"")); keydef->set_gap(); .)
    {
      ident                         (. keydef->set_width(lexical_cast<double>(t->val)); .)
    }.

  Width<kspec::KeyDef &keydef> =
    "width:" ident                  (. keydef.set_width(lexical_cast<double>(t->val)); .)
    .

  Height<kspec::KeyDef &keydef> =
    "height:" ident                 (. keydef.set_height(lexical_cast<double>(t->val)); .)
    .

/* ----------------------------------------------------------------------------- */
  Keyboard =
    "Keyboard:" ident               (. kb.reset(new kspec::Keyboard(t->val)); .)
    ( Import | Matrix )
    { Import | Layout }
    ( Import | KeyMap )
    { ( Import | KeyMap ) }
    .

/* ----------------------------------------------------------------------------- */
  Matrix =
    "Matrix:" Row {Row} Pinouts {Led} [BlockGhostKeys].

/* ----------------------------------------------------------------------------- */
  KeyMap =
    "KeyMap:" ident                 (. kspec::KeyMap::Ptr map(new kspec::KeyMap(t->val)); .)
    [
      "base:" ident                 (. map->set_base(t->val); .)
    ]
    [
      "default"                     (. map->make_default(); .)
    ]
    Key<*map> {Key<*map>}           (. kb->add_keymap(map); .)
    .

/* ----------------------------------------------------------------------------- */
  Row =
    "Row:"                         (. kspec::MatrixRowPtr row(new kspec::MatrixRow()); .)
    ("--" | ident)                 (. row->push_back(t->val); .)
    {
      ("--" | ident)               (. row->push_back(t->val); .)
    }                              (. kb->add_matrix_row(row); .)
  .

/* ----------------------------------------------------------------------------- */
  Pinouts =
    ColPins RowPins.

/* ----------------------------------------------------------------------------- */
  ColPins =
    "ColPins:"
    ident                          (. kb->add_col_pin(t->val); .)
    {
      ident                        (. kb->add_col_pin(t->val); .)
    }.

/* ----------------------------------------------------------------------------- */
  RowPins =
    "RowPins:"
    ident                          (. kb->add_row_pin(t->val); .)
    {
      ident                        (. kb->add_row_pin(t->val); .)
    }.

/* ----------------------------------------------------------------------------- */
  Led =
    "LED:"                         (. kspec::LED::Ptr led; .)
    ("num_lock"                    (. led.reset(new kspec::LED(t->val,
                                                            kspec::LED::numlock)); .)
    |"caps_lock"                   (. led.reset(new kspec::LED(t->val,
                                                            kspec::LED::capslock)); .)
    |"scroll_lock"                 (. led.reset(new kspec::LED(t->val,
                                                            kspec::LED::scrolllock)); .)
    |"compose"                     (. led.reset(new kspec::LED(t->val,
                                                            kspec::LED::compose)); .)
    |"kana"                        (. led.reset(new kspec::LED(t->val,
                                                            kspec::LED::kana)); .)
    | ident                        (. led.reset(new kspec::LED(t->val)); .)
    )
    "pin:" ident                   (. led->set_pin(t->val); .)
    "flow:"
    ("source"                      (. led->set_flow(kspec::LED::source); .)
    |"sink"                        (. led->set_flow(kspec::LED::sink); .)
    )                              (. kb->add_led(led); .)
    .

/* ----------------------------------------------------------------------------- */
  BlockGhostKeys =                 (. bool block = false; .)
    "BlockGhostKeys:"
    Boolean<block>                 (. kb->set_block_ghost_keys(block); .)
    .

/* ----------------------------------------------------------------------------- */
  Boolean<bool &val> =
    (( "true" | "yes" )            (. val = true;  .)
    |( "false" | "no" )            (. val = false; .)
    ).

/* ----------------------------------------------------------------------------- */
  Key<kspec::KeyMap &map> =
    "Key:" ident                   (. kspec::Key &key = map.add_key(t->val);
                                      kspec::Binding::Ptr binding; .)
    Binding<binding>               (. key.add_binding(binding); .)
    {
      "|" Binding<binding>         (. key.add_binding(binding); .)
    }.

/* ----------------------------------------------------------------------------- */
  Binding<kspec::Binding::Ptr &binding> = (. int premods = 0; .)
    [Mods<premods>]
    (                              (. kspec::Map::Ptr map; .)
      Map<map>                     (. binding = map; .)
    |                              (. kspec::Macro::Ptr macro; .)
      Macro<macro>                 (. binding = macro; .)
    |                              (. kspec::Mode::Ptr mode; .)
      Mode<mode>                   (. binding = mode; .)
    )                              (. binding->set_premods(premods); .)
    .

/* ----------------------------------------------------------------------------- */
  Map<kspec::Map::Ptr &map> =      (. kspec::Label::Location loc;
                                      std::wstring label;
                                      std::wstring id;
                                      std::wstring page = L"Keyboard_and_Keypad"; .)
    "Map:" Unslashed<id>           (. int mods = 0; .)
    [Mods<mods>]
    [
      "page:" ident                (. page = t->val; .)
    ]                              (. const kspec::Usage &usage = lookup_usage(id, page);
                                      map.reset(new kspec::Map(usage, mods)); .)
    {
      Label<loc, label>            (. map->add_label(loc, label); .)
    }
    .

/* ----------------------------------------------------------------------------- */
  Macro<kspec::Macro::Ptr &macro> =(. kspec::Label::Location loc; std::wstring text; .)
    "Macro:"                       (. kspec::Map::Ptr map;
                                      macro.reset(new kspec::Macro()); .)
    {
      Label<loc, text>             (. macro->add_label(loc, text); .)
    }
    Map<map>                       (. macro->add_map(map); .)
    {
      Map<map>                     (. macro->add_map(map); .)
    }.

/* ----------------------------------------------------------------------------- */
  Mode<kspec::Mode::Ptr &mode> =   (. kspec::Label::Location loc; std::wstring text; .)
    "Mode:" ident                  (. mode.reset(new kspec::Mode(t->val)); .)
    {
      "led:" ident
    }
    "type:"
    ( "toggle"                     (. mode->set_type(kspec::Mode::toggle); .)
    | "momentary"                  (. mode->set_type(kspec::Mode::momentary); .)
    )
    {
      Label<loc, text>             (. mode->add_label(loc, text); .)
    }
    .

/* ----------------------------------------------------------------------------- */
  Label<kspec::Label::Location &loc, std::wstring &text> =
    ( "tl"                         (. loc = kspec::Label::top_left; .)
    | "tc"                         (. loc = kspec::Label::top_center; .)
    | "tr"                         (. loc = kspec::Label::top_right; .)
    | "l"                          (. loc = kspec::Label::center_left; .)
    | "c"                          (. loc = kspec::Label::center; .)
    | "r"                          (. loc = kspec::Label::center_right; .)
    | "bl"                         (. loc = kspec::Label::bottom_left; .)
    | "bc"                         (. loc = kspec::Label::bottom_center; .)
    | "br"                         (. loc = kspec::Label::bottom_right; .)
    )
    ":"
    string                         (. text = t->val; .)
    .

/* ----------------------------------------------------------------------------- */
  modifier<int &mod> =
    ( "left_shift"                 (. mod = kspec::left_shift;   .)
    | "left_alt"                   (. mod = kspec::left_alt;     .)
    | "left_control"               (. mod = kspec::left_control; .)
    | "left_gui"                   (. mod = kspec::left_gui;     .)
    | "right_shift"                (. mod = kspec::right_shift;  .)
    | "right_alt"                  (. mod = kspec::right_alt;    .)
    | "right_control"              (. mod = kspec::right_control;.)
    | "right_gui"                  (. mod = kspec::right_gui;    .)
    | "shift"                      (. mod = kspec::any_shift;    .)
    | "alt"                        (. mod = kspec::any_alt;      .)
    | "control"                    (. mod = kspec::any_control;  .)
    | "gui"                        (. mod = kspec::any_gui;      .)
    ).

/* ----------------------------------------------------------------------------- */
  Mods<int &mods> =                (. int mod; .)
    "<"
    modifier<mod>                  (. mods |= mod; .)
    {
      "|" modifier<mod>            (. mods |= mod; .)
    }
    ">".

/* ----------------------------------------------------------------------------- */
  Unslashed<std::wstring &value> =
    ident                          (. value = unslash(t->val); .)
    .

/* ----------------------------------------------------------------------------- */

END kspec.


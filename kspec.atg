#include <iostream>
#include "keyboard.h"
#include "utils.h"

COMPILER kspec

  hh::KeyboardPtr kb;

CHARACTERS
  letter  = 'A' .. 'Z' + 'a' .. 'z'.
  digit   = '0' .. '9'.
  cr      = '\r'.
  lf      = '\n'.
  tab     = '\t'.
  id_ch   = letter + digit + "`~-_!@#$%^&*()+={}[]/?;.,".
  esc_ch  = ":<>'\"\\|".
  stringCh  = ANY - '"' - '\\' - cr - lf.
  charCh    = ANY - '\'' - '\\' - cr - lf.
  printable =  '\u0020' .. '\u007e'.

TOKENS
  ident   = (id_ch | "\\" esc_ch) {id_ch | "\\" esc_ch}.
  string    = '"' { stringCh | '\\' printable } '"'.
  badString = '"' { stringCh | '\\' printable } (cr | lf).

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS
/* ----------------------------------------------------------------------------- */
  kspec = 
    Keyboard.

/* ----------------------------------------------------------------------------- */
  Keyboard = 
    "Keyboard:" ident               (. kb.reset(new hh::Keyboard(t->val)); .)  
    Matrix                  
    KeyMap {KeyMap}.

/* ----------------------------------------------------------------------------- */
  Matrix = 
    "Matrix:" Row { Row } Pinouts.

/* ----------------------------------------------------------------------------- */
  KeyMap = 
    "KeyMap:" ident                 (. hh::KeyMapPtr map(new hh::KeyMap(t->val)); .)
    {"base:" ident}                 (. map->set_base(t->val); .)
    ["default"]                     (. map->make_default(); .)
    Key<*map> {Key<*map>}           (. kb->add_keymap(map); .)
    .

/* ----------------------------------------------------------------------------- */
  Row = 
    "Row:"                         (. hh::MatrixRowPtr row(new hh::MatrixRow()); .)
    ("--" | ident)                 (. row->push_back(t->val); .) 
    { ("--" | ident)               (. row->push_back(t->val); .)  
    }                              (. kb->add_matrix_row(row); .) 
  .

/* ----------------------------------------------------------------------------- */
  Pinouts = 
    ColPins RowPins.

/* ----------------------------------------------------------------------------- */
  ColPins = 
    "Cols:"               
    ident                          (. kb->add_col_pin(t->val); .)
    { ident                        (. kb->add_col_pin(t->val); .)
    }.

/* ----------------------------------------------------------------------------- */
  RowPins = 
    "Rows:"
    ident                          (. kb->add_row_pin(t->val); .)
    { ident                        (. kb->add_row_pin(t->val); .)
    }.

/* ----------------------------------------------------------------------------- */
  Key<hh::KeyMap &map> = 
    "Key:" ident                   (. hh::Key &key = map.add_key(t->val); 
                                      hh::Binding *binding = NULL; .)
    Binding<&binding>              (. key.add_binding(binding); .)
    { Binding<&binding>            (. key.add_binding(binding); .)
    }.

/* ----------------------------------------------------------------------------- */
  Binding<hh::Binding **binding> = (. hh::Mods mods; .)
    {Mods<mods>}
    (Map<binding> | Macro<binding> | Mode<binding>)
    .

/* ----------------------------------------------------------------------------- */
  Map<hh::Binding **binding> =     (. hh::LabelLocation loc; std::wstring text; .)
    "Map:" ident                   (. hh::Mods mods; 
                                      hh::Map *map = new hh::Map(t->val); 
                                      *binding = map; .)
    { Mods<mods>                   (. map->set_mods(mods); .)
    }
    ["page:" ident]                (. map->set_page(t->val); .)
    { label<loc, text>             (. map->add_label(loc, text); .)
    }
    .

/* ----------------------------------------------------------------------------- */
  Macro<hh::Binding **binding> =   (. hh::LabelLocation loc; std::wstring text; .)
    "Macro:"                       (. hh::Binding *map = NULL; 
                                      hh::Macro *macro = new hh::Macro();
                                      *binding = macro; .)
    { label<loc, text>             (. macro->add_label(loc, text); .)
    }
    Map<&map>                      (. macro->add_map(dynamic_cast<hh::Map*>(map)); .)
    { Map<&map>                    (. macro->add_map(dynamic_cast<hh::Map*>(map)); .) 
    }.

/* ----------------------------------------------------------------------------- */
  Mode<hh::Binding **binding> =    (. hh::LabelLocation loc; std::wstring text; .)
    "Mode:" ident                  (. hh::Mode *mode = new hh::Mode(t->val); 
                                      *binding = mode; .)
    { "led:" ident
    } 
    "type:" ("toggle" | "momentary") 
    { label<loc, text>             (. mode->add_label(loc, text); .)
    }
    .

/* ----------------------------------------------------------------------------- */
  label<hh::LabelLocation &loc, std::wstring &text> = 
    ( "tl"                         (. loc = hh::top_left; .) 
    | "tc"                         (. loc = hh::top_center; .) 
    | "tr"                         (. loc = hh::top_right; .) 
    | "l"                          (. loc = hh::center_left; .) 
    | "c"                          (. loc = hh::center; .) 
    | "r"                          (. loc = hh::center_right; .) 
    | "bl"                         (. loc = hh::bottom_left; .) 
    | "bc"                         (. loc = hh::bottom_left; .) 
    | "br")                        (. loc = hh::bottom_left; .) 
    ":" 
    string                         (. text = t->val; .)
    .

/* ----------------------------------------------------------------------------- */
  modifier = 
    ( "left_shift"  | "left_alt"  | "left_control"  | "left_gui" 
    | "right_shift" | "right_alt" | "right_control" | "right_gui" 
    | "shift"       | "alt"       | "control"       | "gui" )
    .

/* ----------------------------------------------------------------------------- */
  Mods<hh::Mods& mods> = 
    "<" 
    modifier 
    { "|" modifier 
    } 
    ">".

/* ----------------------------------------------------------------------------- */

END kspec. 


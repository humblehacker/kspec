#include <iostream>
#include "keyboard.h"
#include "hid_usages.h"
#include "utils.h"

COMPILER kspec

  hh::Keyboard::Ptr kb;

CHARACTERS
  letter  = 'A' .. 'Z' + 'a' .. 'z'.
  digit   = '0' .. '9'.
  cr      = '\r'.
  lf      = '\n'.
  tab     = '\t'.
  id_ch   = letter + digit + "`~-_!@#$%^&*()+={}[]/?;.,".
  esc_ch  = ":<>'\"\\|".
  stringCh  = ANY - '"' - '\\' - cr - lf.
  charCh    = ANY - '\'' - '\\' - cr - lf.
  printable =  '\u0020' .. '\u007e'.

TOKENS
  ident     = (id_ch | "\\" esc_ch) {id_ch | "\\" esc_ch}.
  string    = '"' { stringCh | '\\' printable } '"'.
  badString = '"' { stringCh | '\\' printable } (cr | lf).

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS
/* ----------------------------------------------------------------------------- */
  kspec =
    Keyboard.

/* ----------------------------------------------------------------------------- */
  Keyboard =
    "Keyboard:" ident               (. kb.reset(new hh::Keyboard(t->val)); .)
    Matrix
    KeyMap {KeyMap}.

/* ----------------------------------------------------------------------------- */
  Matrix =
    "Matrix:" Row {Row} Pinouts {Led} [BlockGhostKeys].

/* ----------------------------------------------------------------------------- */
  KeyMap =
    "KeyMap:" ident                 (. hh::KeyMap::Ptr map(new hh::KeyMap(t->val)); .)
    [
      "base:" ident                 (. map->set_base(t->val); .)
    ]
    [
      "default"                     (. map->make_default(); .)
    ]
    Key<*map> {Key<*map>}           (. kb->add_keymap(map); .)
    .

/* ----------------------------------------------------------------------------- */
  Row =
    "Row:"                         (. hh::MatrixRowPtr row(new hh::MatrixRow()); .)
    ("--" | ident)                 (. row->push_back(t->val); .)
    {
      ("--" | ident)               (. row->push_back(t->val); .)
    }                              (. kb->add_matrix_row(row); .)
  .

/* ----------------------------------------------------------------------------- */
  Pinouts =
    ColPins RowPins.

/* ----------------------------------------------------------------------------- */
  ColPins =
    "ColPins:"
    ident                          (. kb->add_col_pin(t->val); .)
    {
      ident                        (. kb->add_col_pin(t->val); .)
    }.

/* ----------------------------------------------------------------------------- */
  RowPins =
    "RowPins:"
    ident                          (. kb->add_row_pin(t->val); .)
    {
      ident                        (. kb->add_row_pin(t->val); .)
    }.

/* ----------------------------------------------------------------------------- */
  Led =
    "LED:" ident                   (. hh::LED::Ptr led(new hh::LED(t->val)); .)
    "pin:" ident                   (. led->set_pin(t->val); .)
    "flow:"
    ("source"                      (. led->set_flow(hh::LED::source); .)
    |"sink"                        (. led->set_flow(hh::LED::sink); .)
    )
    ["std:"
    ("num_lock"                    (. led->set_std(hh::LED::numlock); .)
    |"caps_lock"                   (. led->set_std(hh::LED::capslock); .)
    |"scroll_lock"                 (. led->set_std(hh::LED::scrolllock); .)
    |"compose"                     (. led->set_std(hh::LED::compose); .)
    |"kana"                        (. led->set_std(hh::LED::kana); .)
    )]                             (. kb->add_led(led); .)
    .

/* ----------------------------------------------------------------------------- */
  BlockGhostKeys =                 (. bool block = false; .)
    "BlockGhostKeys:"
    Boolean<block>                 (. kb->set_block_ghost_keys(block); .)
    .

/* ----------------------------------------------------------------------------- */
  Boolean<bool &val> =
    (( "true" | "yes" )            (. val = true;  .)
    |( "false" | "no" )            (. val = false; .)
    ).

/* ----------------------------------------------------------------------------- */
  Key<hh::KeyMap &map> =
    "Key:" ident                   (. hh::Key &key = map.add_key(t->val);
                                      hh::Binding::Ptr binding; .)
    Binding<binding>               (. key.add_binding(binding); .)
    {
      "|" Binding<binding>         (. key.add_binding(binding); .)
    }.

/* ----------------------------------------------------------------------------- */
  Binding<hh::Binding::Ptr &binding> = (. int premods = 0; .)
    [Mods<premods>]
    (                              (. hh::Map::Ptr map; .)
      Map<map>                     (. binding = map; .)
    |                              (. hh::Macro::Ptr macro; .)
      Macro<macro>                 (. binding = macro; .)
    |                              (. hh::Mode::Ptr mode; .)
      Mode<mode>                   (. binding = mode; .)
    )                              (. binding->set_premods(premods); .)
    .

/* ----------------------------------------------------------------------------- */
  Map<hh::Map::Ptr &map> =         (. hh::Label::Location loc;
                                      std::wstring label;
                                      std::wstring id;
                                      std::wstring page = L"Keyboard_and_Keypad"; .)
    "Map:" Unslashed<id>           (. int mods = 0; .)
    [Mods<mods>]
    [
      "page:" ident                (. page = t->val; .)
    ]                              (. const hh::Usage &usage = hh::Usage::lookup(id, page);
                                      map.reset(new hh::Map(usage, mods)); .)
    {
      Label<loc, label>            (. map->add_label(loc, label); .)
    }
    .

/* ----------------------------------------------------------------------------- */
  Macro<hh::Macro::Ptr &macro> =   (. hh::Label::Location loc; std::wstring text; .)
    "Macro:"                       (. hh::Map::Ptr map;
                                      macro.reset(new hh::Macro()); .)
    {
      Label<loc, text>             (. macro->add_label(loc, text); .)
    }
    Map<map>                       (. macro->add_map(map); .)
    {
      Map<map>                     (. macro->add_map(map); .)
    }.

/* ----------------------------------------------------------------------------- */
  Mode<hh::Mode::Ptr &mode> =      (. hh::Label::Location loc; std::wstring text; .)
    "Mode:" ident                  (. mode.reset(new hh::Mode(t->val)); .)
    {
      "led:" ident
    }
    "type:"
    ( "toggle"                     (. mode->set_type(hh::Mode::toggle); .)
    | "momentary"                  (. mode->set_type(hh::Mode::momentary); .)
    )
    {
      Label<loc, text>             (. mode->add_label(loc, text); .)
    }
    .

/* ----------------------------------------------------------------------------- */
  Label<hh::Label::Location &loc, std::wstring &text> =
    ( "tl"                         (. loc = hh::Label::top_left; .)
    | "tc"                         (. loc = hh::Label::top_center; .)
    | "tr"                         (. loc = hh::Label::top_right; .)
    | "l"                          (. loc = hh::Label::center_left; .)
    | "c"                          (. loc = hh::Label::center; .)
    | "r"                          (. loc = hh::Label::center_right; .)
    | "bl"                         (. loc = hh::Label::bottom_left; .)
    | "bc"                         (. loc = hh::Label::bottom_left; .)
    | "br")                        (. loc = hh::Label::bottom_left; .)
    ":"
    string                         (. text = t->val; .)
    .

/* ----------------------------------------------------------------------------- */
  modifier<int &mod> =
    ( "left_shift"                 (. mod = hh::left_shift;   .)
    | "left_alt"                   (. mod = hh::left_alt;     .)
    | "left_control"               (. mod = hh::left_control; .)
    | "left_gui"                   (. mod = hh::left_gui;     .)
    | "right_shift"                (. mod = hh::right_shift;  .)
    | "right_alt"                  (. mod = hh::right_alt;    .)
    | "right_control"              (. mod = hh::right_control;.)
    | "right_gui"                  (. mod = hh::right_gui;    .)
    | "shift"                      (. mod = hh::any_shift;    .)
    | "alt"                        (. mod = hh::any_alt;      .)
    | "control"                    (. mod = hh::any_control;  .)
    | "gui"                        (. mod = hh::any_gui;      .)
    ).

/* ----------------------------------------------------------------------------- */
  Mods<int &mods> =                (. int mod; .)
    "<"
    modifier<mod>                  (. mods |= mod; .)
    {
      "|" modifier<mod>            (. mods |= mod; .)
    }
    ">".

/* ----------------------------------------------------------------------------- */
  Unslashed<std::wstring &value> =
    ident                          (. value = unslash(t->val); .)
    .

/* ----------------------------------------------------------------------------- */

END kspec.

